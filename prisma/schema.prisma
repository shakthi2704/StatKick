generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FootballAssociation {
  id          Int                          @id @default(autoincrement())
  name        String                       @unique
  code        String                       @unique
  lastUpdated DateTime                     @updatedAt
  countries   FootballAssociationCountry[]

  @@index([name])
  @@index([code])
}

model Season {
  id            Int            @id @default(autoincrement())
  year          Int            @unique @db.SmallInt
  lastUpdated   DateTime       @default(now()) @updatedAt
  leagueSeasons LeagueSeason[]
  fixtures      Fixture[] // ðŸ‘ˆ Backrelation to Fixture
  standings     Standings[]
  fixtureEvents FixtureEvent[] @relation("SeasonEvents")

  @@index([year])
}

model Country {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String?
  flag        String?
  lastUpdated DateTime @default(now()) @updatedAt

  leagues              League[]
  teams                Team[]
  footballAssociations FootballAssociationCountry[]

  @@index([name])
  @@index([code])
}

model League {
  id               Int               @id @default(autoincrement())
  leagueId         Int               @unique
  name             String
  type             String
  logo             String?
  countryId        Int?
  country          Country?          @relation(fields: [countryId], references: [id], onDelete: SetNull)
  lastUpdated      DateTime          @default(now()) @updatedAt
  leagueSeasons    LeagueSeason[]
  playerStatistics PlayerStatistic[]
  standings        Standings[]

  fixtures      Fixture[] // ðŸ‘ˆ Backrelation for home matches
  fixtureEvents FixtureEvent[] @relation("LeagueEvents")

  @@index([name])
  @@index([countryId])
}

model LeagueSeason {
  id          Int      @id @default(autoincrement())
  league      League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId    Int
  season      Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId    Int
  lastUpdated DateTime @default(now()) @updatedAt

  @@unique([leagueId, seasonId])
  @@index([leagueId])
  @@index([seasonId])
}

model FootballAssociationCountry {
  id Int @id @default(autoincrement())

  association   FootballAssociation @relation(fields: [associationId], references: [id], onDelete: Cascade)
  associationId Int

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int

  lastUpdated DateTime @default(now()) @updatedAt

  @@unique([associationId, countryId])
  @@index([associationId])
  @@index([countryId])
}

model Team {
  id         Int      @id @default(autoincrement())
  externalId Int      @unique
  name       String   @unique
  code       String?
  countryId  Int?
  country    Country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  founded    Int?
  national   Boolean?
  logo       String?

  homeVenueId Int?
  homeVenue   Venue? @relation(fields: [homeVenueId], references: [id], onDelete: SetNull)

  playerTeams      PlayerTeam[]
  playerStatistics PlayerStatistic[]
  transfersOut     PlayerTransfer[]  @relation(name: "TransferFrom")
  transfersIn      PlayerTransfer[]  @relation(name: "TransferTo")
  lineups          MatchLineup[]
  coaches          Coach[]
  coachCareers     CoachCareer[]
  homeFixtures     Fixture[]         @relation("HomeTeam") // ðŸ‘ˆ Backrelation for home matches
  awayFixtures     Fixture[]         @relation("AwayTeam") // ðŸ‘ˆ Backrelation for away matches
  wonFixtures      Fixture[]         @relation("WinnerTeam") // ðŸ‘ˆ Backrelation for matches won
  standings        Standings[]

  lastUpdated DateTime @default(now()) @updatedAt

  fixtureEvents FixtureEvent[] @relation("TeamEvents")

  @@index([name])
  @@index([countryId])
}

model Venue {
  id          Int       @id @default(autoincrement())
  venueId     Int       @unique
  name        String
  address     String?
  city        String
  capacity    Int?
  surface     String?
  image       String?
  lastUpdated DateTime  @default(now()) @updatedAt
  fixtures    Fixture[] // ðŸ‘ˆ Backrelation to Fixture
  teams       Team[]

  @@index([name])
  @@index([city])
}

model Player {
  id           Int       @id @default(autoincrement())
  externalId   Int       @unique
  name         String
  firstname    String?
  lastname     String?
  age          Int?
  birthDate    DateTime?
  birthPlace   String?
  birthCountry String?
  nationality  String?
  height       String?
  weight       String?
  position     String?
  photoUrl     String?

  playerTeams      PlayerTeam[]
  playerStatistics PlayerStatistic[]
  playerTransfers  PlayerTransfer[]
  sidelined        PlayerSidelined[]
  lineups          MatchLineup[]
  lastUpdated      DateTime          @default(now()) @updatedAt

  fixtureEventsFixturePlayer FixtureEvent[] @relation("FixtureEventPlayer")
  fixtureEventsFixtureAssist FixtureEvent[] @relation("FixtureEventAssist")

  @@index([name])
  @@index([birthCountry])
  @@index([nationality])
}

model PlayerTeam {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   Int
  season   Int

  @@unique([playerId, teamId, season])
  @@index([playerId])
  @@index([teamId])
  @@index([season])
}

model PlayerStatistic {
  id            Int    @id @default(autoincrement())
  player        Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      Int
  team          Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        Int
  league        League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId      Int
  season        Int
  gamesPlayed   Int?
  minutesPlayed Int?
  goals         Int?
  assists       Int?
  yellowCards   Int?
  redCards      Int?
  cleanSheets   Int?

  @@unique([playerId, teamId, leagueId, season])
  @@index([playerId])
  @@index([teamId])
  @@index([leagueId])
  @@index([season])
}

model PlayerTransfer {
  id       Int    @id @default(autoincrement())
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  fromTeam   Team? @relation(name: "TransferFrom", fields: [fromTeamId], references: [id], onDelete: SetNull)
  fromTeamId Int?

  toTeam   Team? @relation(name: "TransferTo", fields: [toTeamId], references: [id], onDelete: SetNull)
  toTeamId Int?

  transferDate DateTime?
  transferFee  String?

  @@unique([playerId, fromTeamId, toTeamId, transferDate])
  @@index([playerId])
  @@index([fromTeamId])
  @@index([toTeamId])
}

model Coach {
  id           Int       @id @default(autoincrement())
  externalId   Int       @unique
  name         String
  firstname    String?
  lastname     String?
  age          Int?
  birthDate    DateTime?
  birthPlace   String?
  birthCountry String?
  nationality  String?
  height       String?
  weight       String?
  photoUrl     String?

  teamId Int?
  team   Team? @relation(fields: [teamId], references: [id], onDelete: SetNull)

  career CoachCareer[]

  lastUpdated DateTime @default(now()) @updatedAt

  @@index([name])
  @@index([teamId])
}

model CoachCareer {
  id      Int       @id @default(autoincrement())
  coach   Coach     @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId Int
  team    Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId  Int
  start   DateTime?
  end     DateTime?

  @@unique([coachId, teamId, start])
  @@index([coachId])
  @@index([teamId])
}

model PlayerSidelined {
  id        Int       @id @default(autoincrement())
  player    Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  Int
  type      String // Type of sidelined event (Injury, Suspension, etc.)
  startDate DateTime // Start date of the sidelined period
  endDate   DateTime? // End date (nullable if ongoing)

  lastUpdated DateTime @default(now()) @updatedAt

  @@unique([playerId, type, startDate]) // Prevent duplicate records for the same event
  @@index([playerId])
}

model Fixture {
  id         Int @id @default(autoincrement())
  externalId Int @unique

  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId Int

  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId Int

  homeTeam   Team @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  homeTeamId Int

  awayTeam   Team @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  awayTeamId Int

  venue   Venue? @relation(fields: [venueId], references: [id], onDelete: SetNull)
  venueId Int?

  refereeName String?
  date        DateTime
  status      String
  homeScore   Int?
  awayScore   Int?

  winnerTeam   Team? @relation("WinnerTeam", fields: [winnerTeamId], references: [id], onDelete: SetNull)
  winnerTeamId Int?

  lineups MatchLineup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fixtureEvents FixtureEvent[] @relation("FixtureEvents")

  @@index([leagueId])
  @@index([seasonId])
  @@index([homeTeamId])
  @@index([awayTeamId])
  @@index([venueId])
}

model MatchLineup {
  id           Int     @id @default(autoincrement())
  fixtureId    Int
  teamId       Int
  coachId      Int
  coachName    String
  formation    String
  playerId     Int
  playerName   String
  playerNumber Int
  position     String
  grid         String? // Nullable because some substitutes may not have a grid position
  isSubstitute Boolean

  fixture Fixture @relation(fields: [fixtureId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
  player  Player  @relation(fields: [playerId], references: [id])

  @@index([fixtureId])
  @@index([teamId])
  @@index([playerId])
}

model FixtureEvent {
  id         Int     @id @default(autoincrement())
  fixtureId  Int
  leagueId   Int
  seasonId   Int
  elapsed    Int
  extra      Int?
  teamId     Int
  teamName   String
  playerId   Int?
  playerName String?
  assistId   Int?
  assistName String?
  type       String
  detail     String
  comments   String?

  fixture Fixture @relation("FixtureEvents", fields: [fixtureId], references: [id])
  league  League  @relation("LeagueEvents", fields: [leagueId], references: [id])
  season  Season  @relation("SeasonEvents", fields: [seasonId], references: [id])
  team    Team    @relation("TeamEvents", fields: [teamId], references: [id])

  player Player? @relation("FixtureEventPlayer", fields: [playerId], references: [id])
  assist Player? @relation("FixtureEventAssist", fields: [assistId], references: [id])

  @@index([fixtureId])
  @@index([leagueId])
  @@index([seasonId])
  @@index([teamId])
  @@index([playerId])
  @@index([assistId])
  @@map("fixture_events")
}

model Standings {
  id             Int @id @default(autoincrement())
  leagueId       Int
  seasonId       Int
  teamId         Int
  position       Int
  points         Int
  games          Int
  wins           Int
  draws          Int
  losses         Int
  goalsFor       Int
  goalsAgainst   Int
  goalDifference Int

  league League @relation(fields: [leagueId], references: [id])
  season Season @relation(fields: [seasonId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@index([leagueId])
  @@index([seasonId])
  @@index([teamId])
}
